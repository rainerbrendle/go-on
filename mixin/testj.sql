/*
 * SCHEMA PR2
 * 
 * JOURNAL
 */

DROP SCHEMA PR2 CASCADE;
CREATE SCHEMA PR2;


CREATE TABLE IF NOT EXISTS PR2.ReceiverJournal (
   SequenceID BIGINT GENERATED BY DEFAULT AS IDENTITY, 
                                    /* (Sender) Sequence message outbox queue */
   ActorID    VARCHAR NOT NULL,     /* 'Actor' Class Name */
   ReceiverID VARCHAR NOT NULL,     /* Recipient Location (shard) */
   SenderID   VARCHAR NOT NULL,     /* Sender location */
   MessageSequence BigInt NOT NULL, /* Sequence (Offset) */
   Reason VARCHAR,                  /* Reason (usually 'account #) */
   DateTime  VARCHAR,               /* Physical Recording Time */
   Epoch VARCHAR,                   /* Epoche (for fail-over) */
   ActionID VARCHAR,                /* Action (create, modify, cancel) */
   bData BYTEA,                     /* Binary Data (optional) */
   cData VARCHAR,                   /* (Unicode) String Data */
   jData JSONB,                     /* JSON payload */
   MajorProtocolVersion BigInt,     /* Protocol Version */
   MinorProtocolVersion BigInt,     /* (Minor) Protocol Version */
   Signature VARCHAR,               /* Signature */

   UNIQUE(ActorID, ReceiverID, MessageSequence, Epoch ),
   UNIQUE(SenderID, SequenceID )
 );

 CREATE TABLE IF NOT EXISTS PR2.SenderJournal (
   SequenceID BIGINT GENERATED ALWAYS AS IDENTITY, 
                                    /* (Sender) Sequence message outbox queue */
   ActorID    VARCHAR NOT NULL,     /* 'Actor' Class Name */
   ReceiverID VARCHAR NOT NULL,     /* Recipient Location (shard) */
   SenderID   VARCHAR NOT NULL,     /* Sender location */
   Reason VARCHAR,                  /* Reason (usually 'account #) */
   DateTime  VARCHAR,               /* Physical Recording Time */
   Epoch VARCHAR,                   /* Epoche (for fail-over) */
   ActionID VARCHAR,                /* Action (create, modify, cancel) */
   bData BYTEA,                     /* Binary Data (optional) */
   cData VARCHAR,                   /* (Unicode) String Data */
   jData JSONB,                     /* JSON payload */
   MajorProtocolVersion BigInt,     /* Protocol Version */
   MinorProtocolVersion BigInt,     /* (Minor) Protocol Version */
   Signature VARCHAR,               /* Signature */

   UNIQUE(SenderID, ActorID, SequenceID, Epoch )
 );

 CREATE TABLE IF NOT EXISTS PR2.HighWaterMark (
   ActorID    VARCHAR NOT NULL,    /* Actor */
   SenderID   VARCHAR NOT NULL,    /* Sender location */
   SequenceID BigInt,              /* Sequence (Offset) */
   Epoch      VARCHAR,             /* Epoche */
   
   UNIQUE(ActorID, SenderID, SequenceID, Epoch )
 );


 CREATE  OR REPLACE  FUNCTION PR2.GetHWM(_sender text)
    RETURNS BIGINT  as $$
 
    DECLARE
      _seq BigInt;

    BEGIN

      SELECT SequenceID From PR2.HighWaterMark WHERE
         SenderID = _sender INTO _seq;

      IF NOT FOUND THEN
           _seq = '-1';
      END IF;

      RETURN _seq;

    END;

$$ LANGUAGE plpgsql;




